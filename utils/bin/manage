#!/usr/bin/env python
import os

utils_path 		= os.path.dirname(os.path.realpath(__file__)) + os.sep + ".." ;
virtualenv 		= utils_path + os.sep + "bin" + os.sep + 'activate_this.py'
conf_file		= "Clusterconf.yaml"
conf_path		= os.path.join(utils_path, "..", conf_file)
vagrant_file	= "Vagrantfile"
vagrant_path	= os.path.join(utils_path, "..", vagrant_file)

execfile(virtualenv, dict(__file__=virtualenv))

import pystache, pyaml, getopt, sys, pprint, yaml
from socket import inet_aton
from struct import unpack
from netaddr import *

helpstring 	= 'USAGE: manage <ACTION>[--add|--remove|--up|--list] <ROLE>[balancer|app|db|storage]'

def main(argv):
	role = ""

	try:		
		opts, args = getopt.getopt(argv, "a:r:w:", ["add", "remove", "write", "list"])
   	except getopt.GetoptError:
   		print helpstring
   		sys.exit(2)

   	action 	= ''
   	if len(args) > 0:
   		role = args.pop(0)

	for opt, arg in opts:
		if opt == '--add':
			action 	= "add"
		elif opt == "--remove":
			action 	= "remove"
		elif opt == "--up":
			action 	= "up"
		elif opt == "--list":
			action 	= "list"
		else:
			print helpstring
			sys.exit()

	return [action, role]

def getFreeIPs(poolstring, nodes):
	[poolstart, poolend] = poolstring.split(" - ", 2)
	ips = set(iter_iprange(poolstart, poolend))
	owned = []
	for node in nodes:
		owned.append(IPAddress(node['ip']))
	ips = ips - set(owned)
	return list(ips)

def addNode(roleName):
	print "Adding node with role: "+roleName

	config 		= yaml.load(open(conf_path, "r").read())
	free_ips  	= getFreeIPs(config['ip_pool'], config['nodes'])
	if(len(free_ips) == 0):
		print "Sorry, no free ips available. Please extend pool"
		sys.exit(1)
	free_ip 	= str(free_ips.pop())

	print "Free IP: "+free_ip
	#roles node list
	active_nodes = []
	for node in config['nodes']:
		if node['role'] == roleName:
			active_nodes.append(node)

	new_node = {
		"ip": free_ip,
		"name": roleName+"_"+str(len(active_nodes)+1),
		"role": roleName
	}

	config['nodes'].append(new_node)

	stream = file(conf_path, 'w')
	yaml.dump(config, stream)

	print "New node with IP "+free_ip+" and name "+new_node['name']+" added."
	print "Generating new Vagrantfile"

	vagrant_config = generateVagrantConfig(config)
	stream = file(vagrant_path, 'w')
	stream.write(vagrant_config)

	return True

def removeNode(roleName):
	print "Removing node with role "+roleName
	removed = False
	config 	= yaml.load(open(conf_path, "r").read())
	for node in config['nodes']:
		if node['role'] == roleName:
			i = config['nodes'].index(node)
			del config['nodes'][i]
			removed = True
			break

	if removed == False:
		print "Nothing to delete"
		sys.exit(1)

	stream = file(conf_path, 'w')
	yaml.dump(config, stream)

	print "Removed node with IP "+node['ip']+" and name "+node['name']
	return True

def upNode(name):
	print "Starting node "+name
	return True

def listNodes():
	print "Dump config"
	config = yaml.load(open(conf_path, "r").read())
	vagrant_config = generateVagrantConfig(config)
	stream = file(vagrant_path, 'w')
	stream.write(vagrant_config)

	return True	

def ip2long(ip_addr):
    return unpack("!L", inet_aton(ip_addr))[0]

if os.path.exists(conf_path) == False:
	print helpstring
	print "Sorry, Clusterconf.yaml file not found. Did you copy it from default config?"
	sys.exit(1)

def generateVagrantConfig(config):
	binhost			= False
	tpl_path 		= os.path.abspath(utils_path+os.sep+"templates")
	tpl_filename 	= tpl_path+os.sep+"Vagrantfile.tpl";
	tpl_string 		= unicode(open(tpl_filename, "r").read(), 'UTF-8');
	parsedTemplate	= pystache.parse(tpl_string);
	
	pprint.pprint(config)

	config['chef_cookbook_path'] = os.path.abspath(os.path.join(utils_path, "..", "chef", "cookbooks"))
	config['chef_roles_path'] = os.path.abspath(os.path.join(utils_path, "..", "chef", "roles"))


	if "domain" in config:
		for node in config['nodes']:
			node_index = config['nodes'].index(node)
			config['nodes'][node_index]['fqdn'] = ".".join([node['name'], config['domain']])

	for node in config['nodes']:
		if node['role'] == "binhost":
			binhost = node;
			break;

	if binhost:
		for node in config['nodes']:
			if node['role'] != "binhost":
				node_index = config['nodes'].index(node)
				config['nodes'][node_index]['binhost'] = "http://" + ":".join([binhost['ip'], '8080'])

	result = pystache.render(parsedTemplate, config);

	return result

try:
	if __name__ == "__main__":
		action, role = main(sys.argv[1:])
except TypeError as e:
	print helpstring
	sys.exit()

if role == "" and action != "list":
	print helpstring
	print "Sorry, node role/name nust be provided"
	sys.exit()

if action == "add":
	addNode(role)
elif action == "remove":
	removeNode(role)
elif action == "up":
	upNode(role)
elif action == "list":
	listNodes()